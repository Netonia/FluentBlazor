@page "/todos"

<PageTitle>Todos</PageTitle>

<h1>Todos (@todoList.Count(todo => !todo.IsComplete))</h1>

<FluentGrid Spacing="3">
    <FluentGridItem xs="6">
        <FluentTextField @bind-Value="newTodoItem" Placeholder="Enter a Todo"></FluentTextField>
    </FluentGridItem>
    <FluentGridItem xs="6">
    </FluentGridItem>
</FluentGrid>
<FluentButton @onclick="AddTodo">Add todo</FluentButton>

@if (todoList.Count > 0)
{
    <div>
        <ul>
            @foreach (TodoItem todo in todoList)
            {
                <li>
                    <FluentButton OnClick="@(() => RemoveTodo(todo))">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Color="Color.Error" Slot="start" />
                    </FluentButton>
                    <FluentCheckbox type="checkbox" @bind-Value="todo.IsComplete" />
                    <span style="@((todo.IsComplete) ? "text-decoration: line-through" : "")">@todo.Title</span>
                </li>
            }
        </ul>
    </div>
}
else
{
    <p>No todos yet.</p>
}

@code {
    private string newTodoItem { get; set; }
    private List<TodoItem> todoList = new();

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodoItem))
        {
            todoList.Add(new TodoItem(newTodoItem));
            newTodoItem = string.Empty;
        }
    }
    void RemoveTodo(TodoItem todo)
    {
        todoList.Remove(todo);
        StateHasChanged();
    }

    public class TodoItem
    {
        public string Title { get; set; }
        public bool IsComplete { get; set; } = false;

        public TodoItem(string title)
        {
            Title = title;
        }
    }
}